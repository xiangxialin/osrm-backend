// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node-based-graph.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "node-based-graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pbnbg {
class CoordinateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Coordinate>
     _instance;
} _Coordinate_default_instance_;
class NodesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Nodes>
     _instance;
} _Nodes_default_instance_;
class CompressedNbgDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CompressedNbg>
     _instance;
} _CompressedNbg_default_instance_;
class StreetNamesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StreetNames>
     _instance;
} _StreetNames_default_instance_;

namespace protobuf_node_2dbased_2dgraph_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, lat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nodes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nodes, latlon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nodes, osmid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedNbg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedNbg, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedNbg, nodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedNbg, forward_weights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedNbg, reverse_weights_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNames, names_packed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNames, name_offsets_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Coordinate)},
  { 7, -1, sizeof(Nodes)},
  { 14, -1, sizeof(CompressedNbg)},
  { 23, -1, sizeof(StreetNames)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Coordinate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Nodes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CompressedNbg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreetNames_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "node-based-graph.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Coordinate_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Coordinate_default_instance_);_Nodes_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Nodes_default_instance_);_CompressedNbg_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CompressedNbg_default_instance_);_StreetNames_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StreetNames_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026node-based-graph.proto\022\005pbnbg\"&\n\nCoord"
      "inate\022\013\n\003lon\030\001 \001(\005\022\013\n\003lat\030\002 \001(\005\"9\n\005Nodes"
      "\022!\n\006latLon\030\001 \003(\0132\021.pbnbg.Coordinate\022\r\n\005o"
      "smid\030\002 \003(\004\"_\n\rCompressedNbg\022\r\n\005index\030\001 \003"
      "(\r\022\r\n\005nodes\030\002 \003(\r\022\027\n\017forward_weights\030\003 \003"
      "(\r\022\027\n\017reverse_weights\030\004 \003(\r\"9\n\013StreetNam"
      "es\022\024\n\014names_packed\030\001 \001(\t\022\024\n\014name_offsets"
      "\030\002 \003(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 294);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "node-based-graph.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_node_2dbased_2dgraph_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Coordinate::kLonFieldNumber;
const int Coordinate::kLatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Coordinate::Coordinate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnbg.Coordinate)
}
Coordinate::Coordinate(const Coordinate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lon_, &from.lon_,
    static_cast<size_t>(reinterpret_cast<char*>(&lat_) -
    reinterpret_cast<char*>(&lon_)) + sizeof(lat_));
  // @@protoc_insertion_point(copy_constructor:pbnbg.Coordinate)
}

void Coordinate::SharedCtor() {
  ::memset(&lon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lat_) -
      reinterpret_cast<char*>(&lon_)) + sizeof(lat_));
  _cached_size_ = 0;
}

Coordinate::~Coordinate() {
  // @@protoc_insertion_point(destructor:pbnbg.Coordinate)
  SharedDtor();
}

void Coordinate::SharedDtor() {
}

void Coordinate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Coordinate::descriptor() {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Coordinate& Coordinate::default_instance() {
  protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

Coordinate* Coordinate::New(::google::protobuf::Arena* arena) const {
  Coordinate* n = new Coordinate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Coordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnbg.Coordinate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lat_) -
      reinterpret_cast<char*>(&lon_)) + sizeof(lat_));
  _internal_metadata_.Clear();
}

bool Coordinate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnbg.Coordinate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 lon = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnbg.Coordinate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnbg.Coordinate)
  return false;
#undef DO_
}

void Coordinate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnbg.Coordinate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lon = 1;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lon(), output);
  }

  // int32 lat = 2;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lat(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnbg.Coordinate)
}

::google::protobuf::uint8* Coordinate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbnbg.Coordinate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lon = 1;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lon(), target);
  }

  // int32 lat = 2;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lat(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnbg.Coordinate)
  return target;
}

size_t Coordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnbg.Coordinate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 lon = 1;
  if (this->lon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lon());
  }

  // int32 lat = 2;
  if (this->lat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lat());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Coordinate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnbg.Coordinate)
  GOOGLE_DCHECK_NE(&from, this);
  const Coordinate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Coordinate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnbg.Coordinate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnbg.Coordinate)
    MergeFrom(*source);
  }
}

void Coordinate::MergeFrom(const Coordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnbg.Coordinate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lon() != 0) {
    set_lon(from.lon());
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
}

void Coordinate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnbg.Coordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coordinate::CopyFrom(const Coordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnbg.Coordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinate::IsInitialized() const {
  return true;
}

void Coordinate::Swap(Coordinate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Coordinate::InternalSwap(Coordinate* other) {
  using std::swap;
  swap(lon_, other->lon_);
  swap(lat_, other->lat_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Coordinate::GetMetadata() const {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Coordinate

// int32 lon = 1;
void Coordinate::clear_lon() {
  lon_ = 0;
}
::google::protobuf::int32 Coordinate::lon() const {
  // @@protoc_insertion_point(field_get:pbnbg.Coordinate.lon)
  return lon_;
}
void Coordinate::set_lon(::google::protobuf::int32 value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.Coordinate.lon)
}

// int32 lat = 2;
void Coordinate::clear_lat() {
  lat_ = 0;
}
::google::protobuf::int32 Coordinate::lat() const {
  // @@protoc_insertion_point(field_get:pbnbg.Coordinate.lat)
  return lat_;
}
void Coordinate::set_lat(::google::protobuf::int32 value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.Coordinate.lat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Nodes::kLatLonFieldNumber;
const int Nodes::kOsmidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Nodes::Nodes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnbg.Nodes)
}
Nodes::Nodes(const Nodes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      latlon_(from.latlon_),
      osmid_(from.osmid_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnbg.Nodes)
}

void Nodes::SharedCtor() {
  _cached_size_ = 0;
}

Nodes::~Nodes() {
  // @@protoc_insertion_point(destructor:pbnbg.Nodes)
  SharedDtor();
}

void Nodes::SharedDtor() {
}

void Nodes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Nodes::descriptor() {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Nodes& Nodes::default_instance() {
  protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

Nodes* Nodes::New(::google::protobuf::Arena* arena) const {
  Nodes* n = new Nodes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Nodes::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnbg.Nodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  latlon_.Clear();
  osmid_.Clear();
  _internal_metadata_.Clear();
}

bool Nodes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnbg.Nodes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbnbg.Coordinate latLon = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_latlon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 osmid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_osmid())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_osmid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnbg.Nodes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnbg.Nodes)
  return false;
#undef DO_
}

void Nodes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnbg.Nodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbnbg.Coordinate latLon = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->latlon_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->latlon(static_cast<int>(i)), output);
  }

  // repeated uint64 osmid = 2;
  if (this->osmid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _osmid_cached_byte_size_));
  }
  for (int i = 0, n = this->osmid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->osmid(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnbg.Nodes)
}

::google::protobuf::uint8* Nodes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbnbg.Nodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbnbg.Coordinate latLon = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->latlon_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->latlon(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint64 osmid = 2;
  if (this->osmid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _osmid_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->osmid_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnbg.Nodes)
  return target;
}

size_t Nodes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnbg.Nodes)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .pbnbg.Coordinate latLon = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->latlon_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->latlon(static_cast<int>(i)));
    }
  }

  // repeated uint64 osmid = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->osmid_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _osmid_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Nodes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnbg.Nodes)
  GOOGLE_DCHECK_NE(&from, this);
  const Nodes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Nodes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnbg.Nodes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnbg.Nodes)
    MergeFrom(*source);
  }
}

void Nodes::MergeFrom(const Nodes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnbg.Nodes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  latlon_.MergeFrom(from.latlon_);
  osmid_.MergeFrom(from.osmid_);
}

void Nodes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnbg.Nodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nodes::CopyFrom(const Nodes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnbg.Nodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nodes::IsInitialized() const {
  return true;
}

void Nodes::Swap(Nodes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Nodes::InternalSwap(Nodes* other) {
  using std::swap;
  latlon_.InternalSwap(&other->latlon_);
  osmid_.InternalSwap(&other->osmid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Nodes::GetMetadata() const {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Nodes

// repeated .pbnbg.Coordinate latLon = 1;
int Nodes::latlon_size() const {
  return latlon_.size();
}
void Nodes::clear_latlon() {
  latlon_.Clear();
}
const ::pbnbg::Coordinate& Nodes::latlon(int index) const {
  // @@protoc_insertion_point(field_get:pbnbg.Nodes.latLon)
  return latlon_.Get(index);
}
::pbnbg::Coordinate* Nodes::mutable_latlon(int index) {
  // @@protoc_insertion_point(field_mutable:pbnbg.Nodes.latLon)
  return latlon_.Mutable(index);
}
::pbnbg::Coordinate* Nodes::add_latlon() {
  // @@protoc_insertion_point(field_add:pbnbg.Nodes.latLon)
  return latlon_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnbg::Coordinate >*
Nodes::mutable_latlon() {
  // @@protoc_insertion_point(field_mutable_list:pbnbg.Nodes.latLon)
  return &latlon_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnbg::Coordinate >&
Nodes::latlon() const {
  // @@protoc_insertion_point(field_list:pbnbg.Nodes.latLon)
  return latlon_;
}

// repeated uint64 osmid = 2;
int Nodes::osmid_size() const {
  return osmid_.size();
}
void Nodes::clear_osmid() {
  osmid_.Clear();
}
::google::protobuf::uint64 Nodes::osmid(int index) const {
  // @@protoc_insertion_point(field_get:pbnbg.Nodes.osmid)
  return osmid_.Get(index);
}
void Nodes::set_osmid(int index, ::google::protobuf::uint64 value) {
  osmid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnbg.Nodes.osmid)
}
void Nodes::add_osmid(::google::protobuf::uint64 value) {
  osmid_.Add(value);
  // @@protoc_insertion_point(field_add:pbnbg.Nodes.osmid)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Nodes::osmid() const {
  // @@protoc_insertion_point(field_list:pbnbg.Nodes.osmid)
  return osmid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Nodes::mutable_osmid() {
  // @@protoc_insertion_point(field_mutable_list:pbnbg.Nodes.osmid)
  return &osmid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompressedNbg::kIndexFieldNumber;
const int CompressedNbg::kNodesFieldNumber;
const int CompressedNbg::kForwardWeightsFieldNumber;
const int CompressedNbg::kReverseWeightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompressedNbg::CompressedNbg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnbg.CompressedNbg)
}
CompressedNbg::CompressedNbg(const CompressedNbg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      index_(from.index_),
      nodes_(from.nodes_),
      forward_weights_(from.forward_weights_),
      reverse_weights_(from.reverse_weights_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnbg.CompressedNbg)
}

void CompressedNbg::SharedCtor() {
  _cached_size_ = 0;
}

CompressedNbg::~CompressedNbg() {
  // @@protoc_insertion_point(destructor:pbnbg.CompressedNbg)
  SharedDtor();
}

void CompressedNbg::SharedDtor() {
}

void CompressedNbg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressedNbg::descriptor() {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CompressedNbg& CompressedNbg::default_instance() {
  protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

CompressedNbg* CompressedNbg::New(::google::protobuf::Arena* arena) const {
  CompressedNbg* n = new CompressedNbg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompressedNbg::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnbg.CompressedNbg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_.Clear();
  nodes_.Clear();
  forward_weights_.Clear();
  reverse_weights_.Clear();
  _internal_metadata_.Clear();
}

bool CompressedNbg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnbg.CompressedNbg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_index())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 nodes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_nodes())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_nodes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 forward_weights = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_forward_weights())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_forward_weights())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 reverse_weights = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_reverse_weights())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_reverse_weights())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnbg.CompressedNbg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnbg.CompressedNbg)
  return false;
#undef DO_
}

void CompressedNbg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnbg.CompressedNbg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 index = 1;
  if (this->index_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _index_cached_byte_size_));
  }
  for (int i = 0, n = this->index_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->index(i), output);
  }

  // repeated uint32 nodes = 2;
  if (this->nodes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _nodes_cached_byte_size_));
  }
  for (int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->nodes(i), output);
  }

  // repeated uint32 forward_weights = 3;
  if (this->forward_weights_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _forward_weights_cached_byte_size_));
  }
  for (int i = 0, n = this->forward_weights_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->forward_weights(i), output);
  }

  // repeated uint32 reverse_weights = 4;
  if (this->reverse_weights_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _reverse_weights_cached_byte_size_));
  }
  for (int i = 0, n = this->reverse_weights_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->reverse_weights(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnbg.CompressedNbg)
}

::google::protobuf::uint8* CompressedNbg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbnbg.CompressedNbg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 index = 1;
  if (this->index_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _index_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->index_, target);
  }

  // repeated uint32 nodes = 2;
  if (this->nodes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _nodes_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->nodes_, target);
  }

  // repeated uint32 forward_weights = 3;
  if (this->forward_weights_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _forward_weights_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->forward_weights_, target);
  }

  // repeated uint32 reverse_weights = 4;
  if (this->reverse_weights_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _reverse_weights_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->reverse_weights_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnbg.CompressedNbg)
  return target;
}

size_t CompressedNbg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnbg.CompressedNbg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 index = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->index_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _index_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 nodes = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->nodes_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _nodes_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 forward_weights = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->forward_weights_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _forward_weights_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 reverse_weights = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->reverse_weights_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _reverse_weights_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressedNbg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnbg.CompressedNbg)
  GOOGLE_DCHECK_NE(&from, this);
  const CompressedNbg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompressedNbg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnbg.CompressedNbg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnbg.CompressedNbg)
    MergeFrom(*source);
  }
}

void CompressedNbg::MergeFrom(const CompressedNbg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnbg.CompressedNbg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  index_.MergeFrom(from.index_);
  nodes_.MergeFrom(from.nodes_);
  forward_weights_.MergeFrom(from.forward_weights_);
  reverse_weights_.MergeFrom(from.reverse_weights_);
}

void CompressedNbg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnbg.CompressedNbg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedNbg::CopyFrom(const CompressedNbg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnbg.CompressedNbg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedNbg::IsInitialized() const {
  return true;
}

void CompressedNbg::Swap(CompressedNbg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompressedNbg::InternalSwap(CompressedNbg* other) {
  using std::swap;
  index_.InternalSwap(&other->index_);
  nodes_.InternalSwap(&other->nodes_);
  forward_weights_.InternalSwap(&other->forward_weights_);
  reverse_weights_.InternalSwap(&other->reverse_weights_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompressedNbg::GetMetadata() const {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompressedNbg

// repeated uint32 index = 1;
int CompressedNbg::index_size() const {
  return index_.size();
}
void CompressedNbg::clear_index() {
  index_.Clear();
}
::google::protobuf::uint32 CompressedNbg::index(int index) const {
  // @@protoc_insertion_point(field_get:pbnbg.CompressedNbg.index)
  return index_.Get(index);
}
void CompressedNbg::set_index(int index, ::google::protobuf::uint32 value) {
  index_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnbg.CompressedNbg.index)
}
void CompressedNbg::add_index(::google::protobuf::uint32 value) {
  index_.Add(value);
  // @@protoc_insertion_point(field_add:pbnbg.CompressedNbg.index)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CompressedNbg::index() const {
  // @@protoc_insertion_point(field_list:pbnbg.CompressedNbg.index)
  return index_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CompressedNbg::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:pbnbg.CompressedNbg.index)
  return &index_;
}

// repeated uint32 nodes = 2;
int CompressedNbg::nodes_size() const {
  return nodes_.size();
}
void CompressedNbg::clear_nodes() {
  nodes_.Clear();
}
::google::protobuf::uint32 CompressedNbg::nodes(int index) const {
  // @@protoc_insertion_point(field_get:pbnbg.CompressedNbg.nodes)
  return nodes_.Get(index);
}
void CompressedNbg::set_nodes(int index, ::google::protobuf::uint32 value) {
  nodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnbg.CompressedNbg.nodes)
}
void CompressedNbg::add_nodes(::google::protobuf::uint32 value) {
  nodes_.Add(value);
  // @@protoc_insertion_point(field_add:pbnbg.CompressedNbg.nodes)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CompressedNbg::nodes() const {
  // @@protoc_insertion_point(field_list:pbnbg.CompressedNbg.nodes)
  return nodes_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CompressedNbg::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:pbnbg.CompressedNbg.nodes)
  return &nodes_;
}

// repeated uint32 forward_weights = 3;
int CompressedNbg::forward_weights_size() const {
  return forward_weights_.size();
}
void CompressedNbg::clear_forward_weights() {
  forward_weights_.Clear();
}
::google::protobuf::uint32 CompressedNbg::forward_weights(int index) const {
  // @@protoc_insertion_point(field_get:pbnbg.CompressedNbg.forward_weights)
  return forward_weights_.Get(index);
}
void CompressedNbg::set_forward_weights(int index, ::google::protobuf::uint32 value) {
  forward_weights_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnbg.CompressedNbg.forward_weights)
}
void CompressedNbg::add_forward_weights(::google::protobuf::uint32 value) {
  forward_weights_.Add(value);
  // @@protoc_insertion_point(field_add:pbnbg.CompressedNbg.forward_weights)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CompressedNbg::forward_weights() const {
  // @@protoc_insertion_point(field_list:pbnbg.CompressedNbg.forward_weights)
  return forward_weights_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CompressedNbg::mutable_forward_weights() {
  // @@protoc_insertion_point(field_mutable_list:pbnbg.CompressedNbg.forward_weights)
  return &forward_weights_;
}

// repeated uint32 reverse_weights = 4;
int CompressedNbg::reverse_weights_size() const {
  return reverse_weights_.size();
}
void CompressedNbg::clear_reverse_weights() {
  reverse_weights_.Clear();
}
::google::protobuf::uint32 CompressedNbg::reverse_weights(int index) const {
  // @@protoc_insertion_point(field_get:pbnbg.CompressedNbg.reverse_weights)
  return reverse_weights_.Get(index);
}
void CompressedNbg::set_reverse_weights(int index, ::google::protobuf::uint32 value) {
  reverse_weights_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnbg.CompressedNbg.reverse_weights)
}
void CompressedNbg::add_reverse_weights(::google::protobuf::uint32 value) {
  reverse_weights_.Add(value);
  // @@protoc_insertion_point(field_add:pbnbg.CompressedNbg.reverse_weights)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CompressedNbg::reverse_weights() const {
  // @@protoc_insertion_point(field_list:pbnbg.CompressedNbg.reverse_weights)
  return reverse_weights_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CompressedNbg::mutable_reverse_weights() {
  // @@protoc_insertion_point(field_mutable_list:pbnbg.CompressedNbg.reverse_weights)
  return &reverse_weights_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreetNames::kNamesPackedFieldNumber;
const int StreetNames::kNameOffsetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreetNames::StreetNames()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnbg.StreetNames)
}
StreetNames::StreetNames(const StreetNames& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      name_offsets_(from.name_offsets_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  names_packed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.names_packed().size() > 0) {
    names_packed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.names_packed_);
  }
  // @@protoc_insertion_point(copy_constructor:pbnbg.StreetNames)
}

void StreetNames::SharedCtor() {
  names_packed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

StreetNames::~StreetNames() {
  // @@protoc_insertion_point(destructor:pbnbg.StreetNames)
  SharedDtor();
}

void StreetNames::SharedDtor() {
  names_packed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StreetNames::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreetNames::descriptor() {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreetNames& StreetNames::default_instance() {
  protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreetNames* StreetNames::New(::google::protobuf::Arena* arena) const {
  StreetNames* n = new StreetNames;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreetNames::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnbg.StreetNames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_offsets_.Clear();
  names_packed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool StreetNames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnbg.StreetNames)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string names_packed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_names_packed()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->names_packed().data(), static_cast<int>(this->names_packed().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pbnbg.StreetNames.names_packed"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 name_offsets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_name_offsets())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_name_offsets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnbg.StreetNames)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnbg.StreetNames)
  return false;
#undef DO_
}

void StreetNames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnbg.StreetNames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string names_packed = 1;
  if (this->names_packed().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names_packed().data(), static_cast<int>(this->names_packed().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pbnbg.StreetNames.names_packed");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->names_packed(), output);
  }

  // repeated uint32 name_offsets = 2;
  if (this->name_offsets_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _name_offsets_cached_byte_size_));
  }
  for (int i = 0, n = this->name_offsets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->name_offsets(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnbg.StreetNames)
}

::google::protobuf::uint8* StreetNames::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbnbg.StreetNames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string names_packed = 1;
  if (this->names_packed().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names_packed().data(), static_cast<int>(this->names_packed().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pbnbg.StreetNames.names_packed");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->names_packed(), target);
  }

  // repeated uint32 name_offsets = 2;
  if (this->name_offsets_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _name_offsets_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->name_offsets_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnbg.StreetNames)
  return target;
}

size_t StreetNames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnbg.StreetNames)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 name_offsets = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->name_offsets_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _name_offsets_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string names_packed = 1;
  if (this->names_packed().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->names_packed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreetNames::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnbg.StreetNames)
  GOOGLE_DCHECK_NE(&from, this);
  const StreetNames* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreetNames>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnbg.StreetNames)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnbg.StreetNames)
    MergeFrom(*source);
  }
}

void StreetNames::MergeFrom(const StreetNames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnbg.StreetNames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  name_offsets_.MergeFrom(from.name_offsets_);
  if (from.names_packed().size() > 0) {

    names_packed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.names_packed_);
  }
}

void StreetNames::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnbg.StreetNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreetNames::CopyFrom(const StreetNames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnbg.StreetNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreetNames::IsInitialized() const {
  return true;
}

void StreetNames::Swap(StreetNames* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreetNames::InternalSwap(StreetNames* other) {
  using std::swap;
  name_offsets_.InternalSwap(&other->name_offsets_);
  names_packed_.Swap(&other->names_packed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreetNames::GetMetadata() const {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreetNames

// string names_packed = 1;
void StreetNames::clear_names_packed() {
  names_packed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StreetNames::names_packed() const {
  // @@protoc_insertion_point(field_get:pbnbg.StreetNames.names_packed)
  return names_packed_.GetNoArena();
}
void StreetNames::set_names_packed(const ::std::string& value) {
  
  names_packed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnbg.StreetNames.names_packed)
}
#if LANG_CXX11
void StreetNames::set_names_packed(::std::string&& value) {
  
  names_packed_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbnbg.StreetNames.names_packed)
}
#endif
void StreetNames::set_names_packed(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  names_packed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnbg.StreetNames.names_packed)
}
void StreetNames::set_names_packed(const char* value, size_t size) {
  
  names_packed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnbg.StreetNames.names_packed)
}
::std::string* StreetNames::mutable_names_packed() {
  
  // @@protoc_insertion_point(field_mutable:pbnbg.StreetNames.names_packed)
  return names_packed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StreetNames::release_names_packed() {
  // @@protoc_insertion_point(field_release:pbnbg.StreetNames.names_packed)
  
  return names_packed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StreetNames::set_allocated_names_packed(::std::string* names_packed) {
  if (names_packed != NULL) {
    
  } else {
    
  }
  names_packed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), names_packed);
  // @@protoc_insertion_point(field_set_allocated:pbnbg.StreetNames.names_packed)
}

// repeated uint32 name_offsets = 2;
int StreetNames::name_offsets_size() const {
  return name_offsets_.size();
}
void StreetNames::clear_name_offsets() {
  name_offsets_.Clear();
}
::google::protobuf::uint32 StreetNames::name_offsets(int index) const {
  // @@protoc_insertion_point(field_get:pbnbg.StreetNames.name_offsets)
  return name_offsets_.Get(index);
}
void StreetNames::set_name_offsets(int index, ::google::protobuf::uint32 value) {
  name_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnbg.StreetNames.name_offsets)
}
void StreetNames::add_name_offsets(::google::protobuf::uint32 value) {
  name_offsets_.Add(value);
  // @@protoc_insertion_point(field_add:pbnbg.StreetNames.name_offsets)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
StreetNames::name_offsets() const {
  // @@protoc_insertion_point(field_list:pbnbg.StreetNames.name_offsets)
  return name_offsets_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
StreetNames::mutable_name_offsets() {
  // @@protoc_insertion_point(field_mutable_list:pbnbg.StreetNames.name_offsets)
  return &name_offsets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pbnbg

// @@protoc_insertion_point(global_scope)
