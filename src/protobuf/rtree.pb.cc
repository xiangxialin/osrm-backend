// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtree.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rtree.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pbrtree {
class SegmentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Segment>
     _instance;
} _Segment_default_instance_;
class RectangleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Rectangle>
     _instance;
} _Rectangle_default_instance_;
class LeafNodeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LeafNode>
     _instance;
} _LeafNode_default_instance_;
class LeavesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Leaves>
     _instance;
} _Leaves_default_instance_;
class SegmentsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Segments>
     _instance;
} _Segments_default_instance_;

namespace protobuf_rtree_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, u_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, forward_segment_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, reverse_segment_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, forward_segment_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, forward_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, reverse_enabled_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, min_lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, min_lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, max_lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, max_lon_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeafNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeafNode, minimum_bounding_rectangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeafNode, indexstart_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeafNode, indexend_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaves, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaves, items_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segments, items_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Segment)},
  { 12, -1, sizeof(Rectangle)},
  { 21, -1, sizeof(LeafNode)},
  { 29, -1, sizeof(Leaves)},
  { 35, -1, sizeof(Segments)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Segment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Rectangle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LeafNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Leaves_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Segments_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "rtree.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Segment_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Segment_default_instance_);_Rectangle_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Rectangle_default_instance_);_LeafNode_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LeafNode_default_instance_);_Leaves_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Leaves_default_instance_);_Segments_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Segments_default_instance_);_LeafNode_default_instance_._instance.get_mutable()->minimum_bounding_rectangle_ = const_cast< ::pbrtree::Rectangle*>(
      ::pbrtree::Rectangle::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013rtree.proto\022\007pbrtree\"\253\001\n\007Segment\022\t\n\001u\030"
      "\001 \001(\r\022\t\n\001v\030\002 \001(\r\022\032\n\022forward_segment_id\030\003"
      " \001(\r\022\032\n\022reverse_segment_id\030\004 \001(\r\022 \n\030forw"
      "ard_segment_position\030\005 \001(\r\022\027\n\017forward_en"
      "abled\030\006 \001(\010\022\027\n\017reverse_enabled\030\007 \001(\010\"O\n\t"
      "Rectangle\022\017\n\007min_lat\030\001 \001(\004\022\017\n\007min_lon\030\002 "
      "\001(\004\022\017\n\007max_lat\030\003 \001(\004\022\017\n\007max_lon\030\004 \001(\004\"h\n"
      "\010LeafNode\0226\n\032minimum_bounding_rectangle\030"
      "\001 \001(\0132\022.pbrtree.Rectangle\022\022\n\nindexStart\030"
      "\002 \001(\r\022\020\n\010indexEnd\030\003 \001(\r\"*\n\006Leaves\022 \n\005ite"
      "ms\030\001 \003(\0132\021.pbrtree.LeafNode\"+\n\010Segments\022"
      "\037\n\005items\030\001 \003(\0132\020.pbrtree.Segmentb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 480);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rtree.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_rtree_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Segment::kUFieldNumber;
const int Segment::kVFieldNumber;
const int Segment::kForwardSegmentIdFieldNumber;
const int Segment::kReverseSegmentIdFieldNumber;
const int Segment::kForwardSegmentPositionFieldNumber;
const int Segment::kForwardEnabledFieldNumber;
const int Segment::kReverseEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Segment::Segment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtree_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbrtree.Segment)
}
Segment::Segment(const Segment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&u_, &from.u_,
    static_cast<size_t>(reinterpret_cast<char*>(&reverse_enabled_) -
    reinterpret_cast<char*>(&u_)) + sizeof(reverse_enabled_));
  // @@protoc_insertion_point(copy_constructor:pbrtree.Segment)
}

void Segment::SharedCtor() {
  ::memset(&u_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reverse_enabled_) -
      reinterpret_cast<char*>(&u_)) + sizeof(reverse_enabled_));
  _cached_size_ = 0;
}

Segment::~Segment() {
  // @@protoc_insertion_point(destructor:pbrtree.Segment)
  SharedDtor();
}

void Segment::SharedDtor() {
}

void Segment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Segment::descriptor() {
  protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rtree_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Segment& Segment::default_instance() {
  protobuf_rtree_2eproto::InitDefaults();
  return *internal_default_instance();
}

Segment* Segment::New(::google::protobuf::Arena* arena) const {
  Segment* n = new Segment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:pbrtree.Segment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&u_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reverse_enabled_) -
      reinterpret_cast<char*>(&u_)) + sizeof(reverse_enabled_));
  _internal_metadata_.Clear();
}

bool Segment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbrtree.Segment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 u = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &u_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 v = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 forward_segment_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forward_segment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reverse_segment_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reverse_segment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 forward_segment_position = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forward_segment_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool forward_enabled = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forward_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reverse_enabled = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbrtree.Segment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbrtree.Segment)
  return false;
#undef DO_
}

void Segment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbrtree.Segment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 u = 1;
  if (this->u() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->u(), output);
  }

  // uint32 v = 2;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->v(), output);
  }

  // uint32 forward_segment_id = 3;
  if (this->forward_segment_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->forward_segment_id(), output);
  }

  // uint32 reverse_segment_id = 4;
  if (this->reverse_segment_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reverse_segment_id(), output);
  }

  // uint32 forward_segment_position = 5;
  if (this->forward_segment_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->forward_segment_position(), output);
  }

  // bool forward_enabled = 6;
  if (this->forward_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->forward_enabled(), output);
  }

  // bool reverse_enabled = 7;
  if (this->reverse_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->reverse_enabled(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pbrtree.Segment)
}

::google::protobuf::uint8* Segment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbrtree.Segment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 u = 1;
  if (this->u() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->u(), target);
  }

  // uint32 v = 2;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->v(), target);
  }

  // uint32 forward_segment_id = 3;
  if (this->forward_segment_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->forward_segment_id(), target);
  }

  // uint32 reverse_segment_id = 4;
  if (this->reverse_segment_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reverse_segment_id(), target);
  }

  // uint32 forward_segment_position = 5;
  if (this->forward_segment_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->forward_segment_position(), target);
  }

  // bool forward_enabled = 6;
  if (this->forward_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->forward_enabled(), target);
  }

  // bool reverse_enabled = 7;
  if (this->reverse_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->reverse_enabled(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbrtree.Segment)
  return target;
}

size_t Segment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbrtree.Segment)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 u = 1;
  if (this->u() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->u());
  }

  // uint32 v = 2;
  if (this->v() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->v());
  }

  // uint32 forward_segment_id = 3;
  if (this->forward_segment_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->forward_segment_id());
  }

  // uint32 reverse_segment_id = 4;
  if (this->reverse_segment_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reverse_segment_id());
  }

  // uint32 forward_segment_position = 5;
  if (this->forward_segment_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->forward_segment_position());
  }

  // bool forward_enabled = 6;
  if (this->forward_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool reverse_enabled = 7;
  if (this->reverse_enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Segment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbrtree.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  const Segment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Segment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbrtree.Segment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbrtree.Segment)
    MergeFrom(*source);
  }
}

void Segment::MergeFrom(const Segment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbrtree.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.u() != 0) {
    set_u(from.u());
  }
  if (from.v() != 0) {
    set_v(from.v());
  }
  if (from.forward_segment_id() != 0) {
    set_forward_segment_id(from.forward_segment_id());
  }
  if (from.reverse_segment_id() != 0) {
    set_reverse_segment_id(from.reverse_segment_id());
  }
  if (from.forward_segment_position() != 0) {
    set_forward_segment_position(from.forward_segment_position());
  }
  if (from.forward_enabled() != 0) {
    set_forward_enabled(from.forward_enabled());
  }
  if (from.reverse_enabled() != 0) {
    set_reverse_enabled(from.reverse_enabled());
  }
}

void Segment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbrtree.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segment::CopyFrom(const Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbrtree.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment::IsInitialized() const {
  return true;
}

void Segment::Swap(Segment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Segment::InternalSwap(Segment* other) {
  using std::swap;
  swap(u_, other->u_);
  swap(v_, other->v_);
  swap(forward_segment_id_, other->forward_segment_id_);
  swap(reverse_segment_id_, other->reverse_segment_id_);
  swap(forward_segment_position_, other->forward_segment_position_);
  swap(forward_enabled_, other->forward_enabled_);
  swap(reverse_enabled_, other->reverse_enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Segment::GetMetadata() const {
  protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rtree_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Segment

// uint32 u = 1;
void Segment::clear_u() {
  u_ = 0u;
}
::google::protobuf::uint32 Segment::u() const {
  // @@protoc_insertion_point(field_get:pbrtree.Segment.u)
  return u_;
}
void Segment::set_u(::google::protobuf::uint32 value) {
  
  u_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.Segment.u)
}

// uint32 v = 2;
void Segment::clear_v() {
  v_ = 0u;
}
::google::protobuf::uint32 Segment::v() const {
  // @@protoc_insertion_point(field_get:pbrtree.Segment.v)
  return v_;
}
void Segment::set_v(::google::protobuf::uint32 value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.Segment.v)
}

// uint32 forward_segment_id = 3;
void Segment::clear_forward_segment_id() {
  forward_segment_id_ = 0u;
}
::google::protobuf::uint32 Segment::forward_segment_id() const {
  // @@protoc_insertion_point(field_get:pbrtree.Segment.forward_segment_id)
  return forward_segment_id_;
}
void Segment::set_forward_segment_id(::google::protobuf::uint32 value) {
  
  forward_segment_id_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.Segment.forward_segment_id)
}

// uint32 reverse_segment_id = 4;
void Segment::clear_reverse_segment_id() {
  reverse_segment_id_ = 0u;
}
::google::protobuf::uint32 Segment::reverse_segment_id() const {
  // @@protoc_insertion_point(field_get:pbrtree.Segment.reverse_segment_id)
  return reverse_segment_id_;
}
void Segment::set_reverse_segment_id(::google::protobuf::uint32 value) {
  
  reverse_segment_id_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.Segment.reverse_segment_id)
}

// uint32 forward_segment_position = 5;
void Segment::clear_forward_segment_position() {
  forward_segment_position_ = 0u;
}
::google::protobuf::uint32 Segment::forward_segment_position() const {
  // @@protoc_insertion_point(field_get:pbrtree.Segment.forward_segment_position)
  return forward_segment_position_;
}
void Segment::set_forward_segment_position(::google::protobuf::uint32 value) {
  
  forward_segment_position_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.Segment.forward_segment_position)
}

// bool forward_enabled = 6;
void Segment::clear_forward_enabled() {
  forward_enabled_ = false;
}
bool Segment::forward_enabled() const {
  // @@protoc_insertion_point(field_get:pbrtree.Segment.forward_enabled)
  return forward_enabled_;
}
void Segment::set_forward_enabled(bool value) {
  
  forward_enabled_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.Segment.forward_enabled)
}

// bool reverse_enabled = 7;
void Segment::clear_reverse_enabled() {
  reverse_enabled_ = false;
}
bool Segment::reverse_enabled() const {
  // @@protoc_insertion_point(field_get:pbrtree.Segment.reverse_enabled)
  return reverse_enabled_;
}
void Segment::set_reverse_enabled(bool value) {
  
  reverse_enabled_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.Segment.reverse_enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rectangle::kMinLatFieldNumber;
const int Rectangle::kMinLonFieldNumber;
const int Rectangle::kMaxLatFieldNumber;
const int Rectangle::kMaxLonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rectangle::Rectangle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtree_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbrtree.Rectangle)
}
Rectangle::Rectangle(const Rectangle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_lat_, &from.min_lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_lon_) -
    reinterpret_cast<char*>(&min_lat_)) + sizeof(max_lon_));
  // @@protoc_insertion_point(copy_constructor:pbrtree.Rectangle)
}

void Rectangle::SharedCtor() {
  ::memset(&min_lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_lon_) -
      reinterpret_cast<char*>(&min_lat_)) + sizeof(max_lon_));
  _cached_size_ = 0;
}

Rectangle::~Rectangle() {
  // @@protoc_insertion_point(destructor:pbrtree.Rectangle)
  SharedDtor();
}

void Rectangle::SharedDtor() {
}

void Rectangle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rectangle::descriptor() {
  protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rtree_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rectangle& Rectangle::default_instance() {
  protobuf_rtree_2eproto::InitDefaults();
  return *internal_default_instance();
}

Rectangle* Rectangle::New(::google::protobuf::Arena* arena) const {
  Rectangle* n = new Rectangle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rectangle::Clear() {
// @@protoc_insertion_point(message_clear_start:pbrtree.Rectangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_lon_) -
      reinterpret_cast<char*>(&min_lat_)) + sizeof(max_lon_));
  _internal_metadata_.Clear();
}

bool Rectangle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbrtree.Rectangle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 min_lat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 min_lon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 max_lat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 max_lon = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbrtree.Rectangle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbrtree.Rectangle)
  return false;
#undef DO_
}

void Rectangle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbrtree.Rectangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 min_lat = 1;
  if (this->min_lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->min_lat(), output);
  }

  // uint64 min_lon = 2;
  if (this->min_lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->min_lon(), output);
  }

  // uint64 max_lat = 3;
  if (this->max_lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->max_lat(), output);
  }

  // uint64 max_lon = 4;
  if (this->max_lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->max_lon(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pbrtree.Rectangle)
}

::google::protobuf::uint8* Rectangle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbrtree.Rectangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 min_lat = 1;
  if (this->min_lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->min_lat(), target);
  }

  // uint64 min_lon = 2;
  if (this->min_lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->min_lon(), target);
  }

  // uint64 max_lat = 3;
  if (this->max_lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->max_lat(), target);
  }

  // uint64 max_lon = 4;
  if (this->max_lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->max_lon(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbrtree.Rectangle)
  return target;
}

size_t Rectangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbrtree.Rectangle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 min_lat = 1;
  if (this->min_lat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->min_lat());
  }

  // uint64 min_lon = 2;
  if (this->min_lon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->min_lon());
  }

  // uint64 max_lat = 3;
  if (this->max_lat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->max_lat());
  }

  // uint64 max_lon = 4;
  if (this->max_lon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->max_lon());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rectangle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbrtree.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  const Rectangle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rectangle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbrtree.Rectangle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbrtree.Rectangle)
    MergeFrom(*source);
  }
}

void Rectangle::MergeFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbrtree.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min_lat() != 0) {
    set_min_lat(from.min_lat());
  }
  if (from.min_lon() != 0) {
    set_min_lon(from.min_lon());
  }
  if (from.max_lat() != 0) {
    set_max_lat(from.max_lat());
  }
  if (from.max_lon() != 0) {
    set_max_lon(from.max_lon());
  }
}

void Rectangle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbrtree.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rectangle::CopyFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbrtree.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rectangle::IsInitialized() const {
  return true;
}

void Rectangle::Swap(Rectangle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rectangle::InternalSwap(Rectangle* other) {
  using std::swap;
  swap(min_lat_, other->min_lat_);
  swap(min_lon_, other->min_lon_);
  swap(max_lat_, other->max_lat_);
  swap(max_lon_, other->max_lon_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rectangle::GetMetadata() const {
  protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rtree_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rectangle

// uint64 min_lat = 1;
void Rectangle::clear_min_lat() {
  min_lat_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Rectangle::min_lat() const {
  // @@protoc_insertion_point(field_get:pbrtree.Rectangle.min_lat)
  return min_lat_;
}
void Rectangle::set_min_lat(::google::protobuf::uint64 value) {
  
  min_lat_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.Rectangle.min_lat)
}

// uint64 min_lon = 2;
void Rectangle::clear_min_lon() {
  min_lon_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Rectangle::min_lon() const {
  // @@protoc_insertion_point(field_get:pbrtree.Rectangle.min_lon)
  return min_lon_;
}
void Rectangle::set_min_lon(::google::protobuf::uint64 value) {
  
  min_lon_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.Rectangle.min_lon)
}

// uint64 max_lat = 3;
void Rectangle::clear_max_lat() {
  max_lat_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Rectangle::max_lat() const {
  // @@protoc_insertion_point(field_get:pbrtree.Rectangle.max_lat)
  return max_lat_;
}
void Rectangle::set_max_lat(::google::protobuf::uint64 value) {
  
  max_lat_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.Rectangle.max_lat)
}

// uint64 max_lon = 4;
void Rectangle::clear_max_lon() {
  max_lon_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Rectangle::max_lon() const {
  // @@protoc_insertion_point(field_get:pbrtree.Rectangle.max_lon)
  return max_lon_;
}
void Rectangle::set_max_lon(::google::protobuf::uint64 value) {
  
  max_lon_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.Rectangle.max_lon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeafNode::kMinimumBoundingRectangleFieldNumber;
const int LeafNode::kIndexStartFieldNumber;
const int LeafNode::kIndexEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeafNode::LeafNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtree_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbrtree.LeafNode)
}
LeafNode::LeafNode(const LeafNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_minimum_bounding_rectangle()) {
    minimum_bounding_rectangle_ = new ::pbrtree::Rectangle(*from.minimum_bounding_rectangle_);
  } else {
    minimum_bounding_rectangle_ = NULL;
  }
  ::memcpy(&indexstart_, &from.indexstart_,
    static_cast<size_t>(reinterpret_cast<char*>(&indexend_) -
    reinterpret_cast<char*>(&indexstart_)) + sizeof(indexend_));
  // @@protoc_insertion_point(copy_constructor:pbrtree.LeafNode)
}

void LeafNode::SharedCtor() {
  ::memset(&minimum_bounding_rectangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&indexend_) -
      reinterpret_cast<char*>(&minimum_bounding_rectangle_)) + sizeof(indexend_));
  _cached_size_ = 0;
}

LeafNode::~LeafNode() {
  // @@protoc_insertion_point(destructor:pbrtree.LeafNode)
  SharedDtor();
}

void LeafNode::SharedDtor() {
  if (this != internal_default_instance()) delete minimum_bounding_rectangle_;
}

void LeafNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeafNode::descriptor() {
  protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rtree_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeafNode& LeafNode::default_instance() {
  protobuf_rtree_2eproto::InitDefaults();
  return *internal_default_instance();
}

LeafNode* LeafNode::New(::google::protobuf::Arena* arena) const {
  LeafNode* n = new LeafNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeafNode::Clear() {
// @@protoc_insertion_point(message_clear_start:pbrtree.LeafNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && minimum_bounding_rectangle_ != NULL) {
    delete minimum_bounding_rectangle_;
  }
  minimum_bounding_rectangle_ = NULL;
  ::memset(&indexstart_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&indexend_) -
      reinterpret_cast<char*>(&indexstart_)) + sizeof(indexend_));
  _internal_metadata_.Clear();
}

bool LeafNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbrtree.LeafNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pbrtree.Rectangle minimum_bounding_rectangle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_minimum_bounding_rectangle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 indexStart = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &indexstart_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 indexEnd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &indexend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbrtree.LeafNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbrtree.LeafNode)
  return false;
#undef DO_
}

void LeafNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbrtree.LeafNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbrtree.Rectangle minimum_bounding_rectangle = 1;
  if (this->has_minimum_bounding_rectangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->minimum_bounding_rectangle_, output);
  }

  // uint32 indexStart = 2;
  if (this->indexstart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->indexstart(), output);
  }

  // uint32 indexEnd = 3;
  if (this->indexend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->indexend(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pbrtree.LeafNode)
}

::google::protobuf::uint8* LeafNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbrtree.LeafNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbrtree.Rectangle minimum_bounding_rectangle = 1;
  if (this->has_minimum_bounding_rectangle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->minimum_bounding_rectangle_, deterministic, target);
  }

  // uint32 indexStart = 2;
  if (this->indexstart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->indexstart(), target);
  }

  // uint32 indexEnd = 3;
  if (this->indexend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->indexend(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbrtree.LeafNode)
  return target;
}

size_t LeafNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbrtree.LeafNode)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .pbrtree.Rectangle minimum_bounding_rectangle = 1;
  if (this->has_minimum_bounding_rectangle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->minimum_bounding_rectangle_);
  }

  // uint32 indexStart = 2;
  if (this->indexstart() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->indexstart());
  }

  // uint32 indexEnd = 3;
  if (this->indexend() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->indexend());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeafNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbrtree.LeafNode)
  GOOGLE_DCHECK_NE(&from, this);
  const LeafNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeafNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbrtree.LeafNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbrtree.LeafNode)
    MergeFrom(*source);
  }
}

void LeafNode::MergeFrom(const LeafNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbrtree.LeafNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_minimum_bounding_rectangle()) {
    mutable_minimum_bounding_rectangle()->::pbrtree::Rectangle::MergeFrom(from.minimum_bounding_rectangle());
  }
  if (from.indexstart() != 0) {
    set_indexstart(from.indexstart());
  }
  if (from.indexend() != 0) {
    set_indexend(from.indexend());
  }
}

void LeafNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbrtree.LeafNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeafNode::CopyFrom(const LeafNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbrtree.LeafNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeafNode::IsInitialized() const {
  return true;
}

void LeafNode::Swap(LeafNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeafNode::InternalSwap(LeafNode* other) {
  using std::swap;
  swap(minimum_bounding_rectangle_, other->minimum_bounding_rectangle_);
  swap(indexstart_, other->indexstart_);
  swap(indexend_, other->indexend_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeafNode::GetMetadata() const {
  protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rtree_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeafNode

// .pbrtree.Rectangle minimum_bounding_rectangle = 1;
bool LeafNode::has_minimum_bounding_rectangle() const {
  return this != internal_default_instance() && minimum_bounding_rectangle_ != NULL;
}
void LeafNode::clear_minimum_bounding_rectangle() {
  if (GetArenaNoVirtual() == NULL && minimum_bounding_rectangle_ != NULL) delete minimum_bounding_rectangle_;
  minimum_bounding_rectangle_ = NULL;
}
const ::pbrtree::Rectangle& LeafNode::minimum_bounding_rectangle() const {
  const ::pbrtree::Rectangle* p = minimum_bounding_rectangle_;
  // @@protoc_insertion_point(field_get:pbrtree.LeafNode.minimum_bounding_rectangle)
  return p != NULL ? *p : *reinterpret_cast<const ::pbrtree::Rectangle*>(
      &::pbrtree::_Rectangle_default_instance_);
}
::pbrtree::Rectangle* LeafNode::mutable_minimum_bounding_rectangle() {
  
  if (minimum_bounding_rectangle_ == NULL) {
    minimum_bounding_rectangle_ = new ::pbrtree::Rectangle;
  }
  // @@protoc_insertion_point(field_mutable:pbrtree.LeafNode.minimum_bounding_rectangle)
  return minimum_bounding_rectangle_;
}
::pbrtree::Rectangle* LeafNode::release_minimum_bounding_rectangle() {
  // @@protoc_insertion_point(field_release:pbrtree.LeafNode.minimum_bounding_rectangle)
  
  ::pbrtree::Rectangle* temp = minimum_bounding_rectangle_;
  minimum_bounding_rectangle_ = NULL;
  return temp;
}
void LeafNode::set_allocated_minimum_bounding_rectangle(::pbrtree::Rectangle* minimum_bounding_rectangle) {
  delete minimum_bounding_rectangle_;
  minimum_bounding_rectangle_ = minimum_bounding_rectangle;
  if (minimum_bounding_rectangle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pbrtree.LeafNode.minimum_bounding_rectangle)
}

// uint32 indexStart = 2;
void LeafNode::clear_indexstart() {
  indexstart_ = 0u;
}
::google::protobuf::uint32 LeafNode::indexstart() const {
  // @@protoc_insertion_point(field_get:pbrtree.LeafNode.indexStart)
  return indexstart_;
}
void LeafNode::set_indexstart(::google::protobuf::uint32 value) {
  
  indexstart_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.LeafNode.indexStart)
}

// uint32 indexEnd = 3;
void LeafNode::clear_indexend() {
  indexend_ = 0u;
}
::google::protobuf::uint32 LeafNode::indexend() const {
  // @@protoc_insertion_point(field_get:pbrtree.LeafNode.indexEnd)
  return indexend_;
}
void LeafNode::set_indexend(::google::protobuf::uint32 value) {
  
  indexend_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.LeafNode.indexEnd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Leaves::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Leaves::Leaves()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtree_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbrtree.Leaves)
}
Leaves::Leaves(const Leaves& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbrtree.Leaves)
}

void Leaves::SharedCtor() {
  _cached_size_ = 0;
}

Leaves::~Leaves() {
  // @@protoc_insertion_point(destructor:pbrtree.Leaves)
  SharedDtor();
}

void Leaves::SharedDtor() {
}

void Leaves::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Leaves::descriptor() {
  protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rtree_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Leaves& Leaves::default_instance() {
  protobuf_rtree_2eproto::InitDefaults();
  return *internal_default_instance();
}

Leaves* Leaves::New(::google::protobuf::Arena* arena) const {
  Leaves* n = new Leaves;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Leaves::Clear() {
// @@protoc_insertion_point(message_clear_start:pbrtree.Leaves)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear();
}

bool Leaves::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbrtree.Leaves)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbrtree.LeafNode items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbrtree.Leaves)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbrtree.Leaves)
  return false;
#undef DO_
}

void Leaves::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbrtree.Leaves)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbrtree.LeafNode items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pbrtree.Leaves)
}

::google::protobuf::uint8* Leaves::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbrtree.Leaves)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbrtree.LeafNode items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbrtree.Leaves)
  return target;
}

size_t Leaves::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbrtree.Leaves)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .pbrtree.LeafNode items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Leaves::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbrtree.Leaves)
  GOOGLE_DCHECK_NE(&from, this);
  const Leaves* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Leaves>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbrtree.Leaves)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbrtree.Leaves)
    MergeFrom(*source);
  }
}

void Leaves::MergeFrom(const Leaves& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbrtree.Leaves)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void Leaves::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbrtree.Leaves)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Leaves::CopyFrom(const Leaves& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbrtree.Leaves)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Leaves::IsInitialized() const {
  return true;
}

void Leaves::Swap(Leaves* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Leaves::InternalSwap(Leaves* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Leaves::GetMetadata() const {
  protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rtree_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Leaves

// repeated .pbrtree.LeafNode items = 1;
int Leaves::items_size() const {
  return items_.size();
}
void Leaves::clear_items() {
  items_.Clear();
}
const ::pbrtree::LeafNode& Leaves::items(int index) const {
  // @@protoc_insertion_point(field_get:pbrtree.Leaves.items)
  return items_.Get(index);
}
::pbrtree::LeafNode* Leaves::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:pbrtree.Leaves.items)
  return items_.Mutable(index);
}
::pbrtree::LeafNode* Leaves::add_items() {
  // @@protoc_insertion_point(field_add:pbrtree.Leaves.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbrtree::LeafNode >*
Leaves::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:pbrtree.Leaves.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::pbrtree::LeafNode >&
Leaves::items() const {
  // @@protoc_insertion_point(field_list:pbrtree.Leaves.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Segments::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Segments::Segments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtree_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbrtree.Segments)
}
Segments::Segments(const Segments& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbrtree.Segments)
}

void Segments::SharedCtor() {
  _cached_size_ = 0;
}

Segments::~Segments() {
  // @@protoc_insertion_point(destructor:pbrtree.Segments)
  SharedDtor();
}

void Segments::SharedDtor() {
}

void Segments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Segments::descriptor() {
  protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rtree_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Segments& Segments::default_instance() {
  protobuf_rtree_2eproto::InitDefaults();
  return *internal_default_instance();
}

Segments* Segments::New(::google::protobuf::Arena* arena) const {
  Segments* n = new Segments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Segments::Clear() {
// @@protoc_insertion_point(message_clear_start:pbrtree.Segments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear();
}

bool Segments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbrtree.Segments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbrtree.Segment items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbrtree.Segments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbrtree.Segments)
  return false;
#undef DO_
}

void Segments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbrtree.Segments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbrtree.Segment items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pbrtree.Segments)
}

::google::protobuf::uint8* Segments::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbrtree.Segments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbrtree.Segment items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbrtree.Segments)
  return target;
}

size_t Segments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbrtree.Segments)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .pbrtree.Segment items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Segments::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbrtree.Segments)
  GOOGLE_DCHECK_NE(&from, this);
  const Segments* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Segments>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbrtree.Segments)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbrtree.Segments)
    MergeFrom(*source);
  }
}

void Segments::MergeFrom(const Segments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbrtree.Segments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void Segments::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbrtree.Segments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segments::CopyFrom(const Segments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbrtree.Segments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segments::IsInitialized() const {
  return true;
}

void Segments::Swap(Segments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Segments::InternalSwap(Segments* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Segments::GetMetadata() const {
  protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rtree_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Segments

// repeated .pbrtree.Segment items = 1;
int Segments::items_size() const {
  return items_.size();
}
void Segments::clear_items() {
  items_.Clear();
}
const ::pbrtree::Segment& Segments::items(int index) const {
  // @@protoc_insertion_point(field_get:pbrtree.Segments.items)
  return items_.Get(index);
}
::pbrtree::Segment* Segments::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:pbrtree.Segments.items)
  return items_.Mutable(index);
}
::pbrtree::Segment* Segments::add_items() {
  // @@protoc_insertion_point(field_add:pbrtree.Segments.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbrtree::Segment >*
Segments::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:pbrtree.Segments.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::pbrtree::Segment >&
Segments::items() const {
  // @@protoc_insertion_point(field_list:pbrtree.Segments.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pbrtree

// @@protoc_insertion_point(global_scope)
