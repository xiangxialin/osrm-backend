// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node-based-graph.proto

#ifndef PROTOBUF_node_2dbased_2dgraph_2eproto__INCLUDED
#define PROTOBUF_node_2dbased_2dgraph_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace pbnbg {
class CompressedNbg;
class CompressedNbgDefaultTypeInternal;
extern CompressedNbgDefaultTypeInternal _CompressedNbg_default_instance_;
class Coordinate;
class CoordinateDefaultTypeInternal;
extern CoordinateDefaultTypeInternal _Coordinate_default_instance_;
class Nodes;
class NodesDefaultTypeInternal;
extern NodesDefaultTypeInternal _Nodes_default_instance_;
class StreetNames;
class StreetNamesDefaultTypeInternal;
extern StreetNamesDefaultTypeInternal _StreetNames_default_instance_;
}  // namespace pbnbg

namespace pbnbg {

namespace protobuf_node_2dbased_2dgraph_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_node_2dbased_2dgraph_2eproto

// ===================================================================

class Coordinate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnbg.Coordinate) */ {
 public:
  Coordinate();
  virtual ~Coordinate();

  Coordinate(const Coordinate& from);

  inline Coordinate& operator=(const Coordinate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Coordinate(Coordinate&& from) noexcept
    : Coordinate() {
    *this = ::std::move(from);
  }

  inline Coordinate& operator=(Coordinate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Coordinate& default_instance();

  static inline const Coordinate* internal_default_instance() {
    return reinterpret_cast<const Coordinate*>(
               &_Coordinate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Coordinate* other);
  friend void swap(Coordinate& a, Coordinate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Coordinate* New() const PROTOBUF_FINAL { return New(NULL); }

  Coordinate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Coordinate& from);
  void MergeFrom(const Coordinate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Coordinate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 lon = 1;
  void clear_lon();
  static const int kLonFieldNumber = 1;
  ::google::protobuf::int32 lon() const;
  void set_lon(::google::protobuf::int32 value);

  // int32 lat = 2;
  void clear_lat();
  static const int kLatFieldNumber = 2;
  ::google::protobuf::int32 lat() const;
  void set_lat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pbnbg.Coordinate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 lon_;
  ::google::protobuf::int32 lat_;
  mutable int _cached_size_;
  friend struct protobuf_node_2dbased_2dgraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Nodes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnbg.Nodes) */ {
 public:
  Nodes();
  virtual ~Nodes();

  Nodes(const Nodes& from);

  inline Nodes& operator=(const Nodes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Nodes(Nodes&& from) noexcept
    : Nodes() {
    *this = ::std::move(from);
  }

  inline Nodes& operator=(Nodes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Nodes& default_instance();

  static inline const Nodes* internal_default_instance() {
    return reinterpret_cast<const Nodes*>(
               &_Nodes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Nodes* other);
  friend void swap(Nodes& a, Nodes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Nodes* New() const PROTOBUF_FINAL { return New(NULL); }

  Nodes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Nodes& from);
  void MergeFrom(const Nodes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Nodes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pbnbg.Coordinate latLon = 1;
  int latlon_size() const;
  void clear_latlon();
  static const int kLatLonFieldNumber = 1;
  const ::pbnbg::Coordinate& latlon(int index) const;
  ::pbnbg::Coordinate* mutable_latlon(int index);
  ::pbnbg::Coordinate* add_latlon();
  ::google::protobuf::RepeatedPtrField< ::pbnbg::Coordinate >*
      mutable_latlon();
  const ::google::protobuf::RepeatedPtrField< ::pbnbg::Coordinate >&
      latlon() const;

  // repeated uint64 osmid = 2;
  int osmid_size() const;
  void clear_osmid();
  static const int kOsmidFieldNumber = 2;
  ::google::protobuf::uint64 osmid(int index) const;
  void set_osmid(int index, ::google::protobuf::uint64 value);
  void add_osmid(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      osmid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_osmid();

  // @@protoc_insertion_point(class_scope:pbnbg.Nodes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pbnbg::Coordinate > latlon_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > osmid_;
  mutable int _osmid_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_node_2dbased_2dgraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CompressedNbg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnbg.CompressedNbg) */ {
 public:
  CompressedNbg();
  virtual ~CompressedNbg();

  CompressedNbg(const CompressedNbg& from);

  inline CompressedNbg& operator=(const CompressedNbg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompressedNbg(CompressedNbg&& from) noexcept
    : CompressedNbg() {
    *this = ::std::move(from);
  }

  inline CompressedNbg& operator=(CompressedNbg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompressedNbg& default_instance();

  static inline const CompressedNbg* internal_default_instance() {
    return reinterpret_cast<const CompressedNbg*>(
               &_CompressedNbg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CompressedNbg* other);
  friend void swap(CompressedNbg& a, CompressedNbg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompressedNbg* New() const PROTOBUF_FINAL { return New(NULL); }

  CompressedNbg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CompressedNbg& from);
  void MergeFrom(const CompressedNbg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CompressedNbg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 index = 1;
  int index_size() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint32 index(int index) const;
  void set_index(int index, ::google::protobuf::uint32 value);
  void add_index(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      index() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_index();

  // repeated uint32 nodes = 2;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 2;
  ::google::protobuf::uint32 nodes(int index) const;
  void set_nodes(int index, ::google::protobuf::uint32 value);
  void add_nodes(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      nodes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_nodes();

  // repeated uint32 forward_weights = 3;
  int forward_weights_size() const;
  void clear_forward_weights();
  static const int kForwardWeightsFieldNumber = 3;
  ::google::protobuf::uint32 forward_weights(int index) const;
  void set_forward_weights(int index, ::google::protobuf::uint32 value);
  void add_forward_weights(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      forward_weights() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_forward_weights();

  // repeated uint32 reverse_weights = 4;
  int reverse_weights_size() const;
  void clear_reverse_weights();
  static const int kReverseWeightsFieldNumber = 4;
  ::google::protobuf::uint32 reverse_weights(int index) const;
  void set_reverse_weights(int index, ::google::protobuf::uint32 value);
  void add_reverse_weights(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      reverse_weights() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_reverse_weights();

  // @@protoc_insertion_point(class_scope:pbnbg.CompressedNbg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > index_;
  mutable int _index_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > nodes_;
  mutable int _nodes_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > forward_weights_;
  mutable int _forward_weights_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > reverse_weights_;
  mutable int _reverse_weights_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_node_2dbased_2dgraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StreetNames : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnbg.StreetNames) */ {
 public:
  StreetNames();
  virtual ~StreetNames();

  StreetNames(const StreetNames& from);

  inline StreetNames& operator=(const StreetNames& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreetNames(StreetNames&& from) noexcept
    : StreetNames() {
    *this = ::std::move(from);
  }

  inline StreetNames& operator=(StreetNames&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreetNames& default_instance();

  static inline const StreetNames* internal_default_instance() {
    return reinterpret_cast<const StreetNames*>(
               &_StreetNames_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(StreetNames* other);
  friend void swap(StreetNames& a, StreetNames& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreetNames* New() const PROTOBUF_FINAL { return New(NULL); }

  StreetNames* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreetNames& from);
  void MergeFrom(const StreetNames& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreetNames* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 name_offsets = 2;
  int name_offsets_size() const;
  void clear_name_offsets();
  static const int kNameOffsetsFieldNumber = 2;
  ::google::protobuf::uint32 name_offsets(int index) const;
  void set_name_offsets(int index, ::google::protobuf::uint32 value);
  void add_name_offsets(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      name_offsets() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_name_offsets();

  // string names_packed = 1;
  void clear_names_packed();
  static const int kNamesPackedFieldNumber = 1;
  const ::std::string& names_packed() const;
  void set_names_packed(const ::std::string& value);
  #if LANG_CXX11
  void set_names_packed(::std::string&& value);
  #endif
  void set_names_packed(const char* value);
  void set_names_packed(const char* value, size_t size);
  ::std::string* mutable_names_packed();
  ::std::string* release_names_packed();
  void set_allocated_names_packed(::std::string* names_packed);

  // @@protoc_insertion_point(class_scope:pbnbg.StreetNames)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > name_offsets_;
  mutable int _name_offsets_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr names_packed_;
  mutable int _cached_size_;
  friend struct protobuf_node_2dbased_2dgraph_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coordinate

// int32 lon = 1;
inline void Coordinate::clear_lon() {
  lon_ = 0;
}
inline ::google::protobuf::int32 Coordinate::lon() const {
  // @@protoc_insertion_point(field_get:pbnbg.Coordinate.lon)
  return lon_;
}
inline void Coordinate::set_lon(::google::protobuf::int32 value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.Coordinate.lon)
}

// int32 lat = 2;
inline void Coordinate::clear_lat() {
  lat_ = 0;
}
inline ::google::protobuf::int32 Coordinate::lat() const {
  // @@protoc_insertion_point(field_get:pbnbg.Coordinate.lat)
  return lat_;
}
inline void Coordinate::set_lat(::google::protobuf::int32 value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.Coordinate.lat)
}

// -------------------------------------------------------------------

// Nodes

// repeated .pbnbg.Coordinate latLon = 1;
inline int Nodes::latlon_size() const {
  return latlon_.size();
}
inline void Nodes::clear_latlon() {
  latlon_.Clear();
}
inline const ::pbnbg::Coordinate& Nodes::latlon(int index) const {
  // @@protoc_insertion_point(field_get:pbnbg.Nodes.latLon)
  return latlon_.Get(index);
}
inline ::pbnbg::Coordinate* Nodes::mutable_latlon(int index) {
  // @@protoc_insertion_point(field_mutable:pbnbg.Nodes.latLon)
  return latlon_.Mutable(index);
}
inline ::pbnbg::Coordinate* Nodes::add_latlon() {
  // @@protoc_insertion_point(field_add:pbnbg.Nodes.latLon)
  return latlon_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnbg::Coordinate >*
Nodes::mutable_latlon() {
  // @@protoc_insertion_point(field_mutable_list:pbnbg.Nodes.latLon)
  return &latlon_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnbg::Coordinate >&
Nodes::latlon() const {
  // @@protoc_insertion_point(field_list:pbnbg.Nodes.latLon)
  return latlon_;
}

// repeated uint64 osmid = 2;
inline int Nodes::osmid_size() const {
  return osmid_.size();
}
inline void Nodes::clear_osmid() {
  osmid_.Clear();
}
inline ::google::protobuf::uint64 Nodes::osmid(int index) const {
  // @@protoc_insertion_point(field_get:pbnbg.Nodes.osmid)
  return osmid_.Get(index);
}
inline void Nodes::set_osmid(int index, ::google::protobuf::uint64 value) {
  osmid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnbg.Nodes.osmid)
}
inline void Nodes::add_osmid(::google::protobuf::uint64 value) {
  osmid_.Add(value);
  // @@protoc_insertion_point(field_add:pbnbg.Nodes.osmid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Nodes::osmid() const {
  // @@protoc_insertion_point(field_list:pbnbg.Nodes.osmid)
  return osmid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Nodes::mutable_osmid() {
  // @@protoc_insertion_point(field_mutable_list:pbnbg.Nodes.osmid)
  return &osmid_;
}

// -------------------------------------------------------------------

// CompressedNbg

// repeated uint32 index = 1;
inline int CompressedNbg::index_size() const {
  return index_.size();
}
inline void CompressedNbg::clear_index() {
  index_.Clear();
}
inline ::google::protobuf::uint32 CompressedNbg::index(int index) const {
  // @@protoc_insertion_point(field_get:pbnbg.CompressedNbg.index)
  return index_.Get(index);
}
inline void CompressedNbg::set_index(int index, ::google::protobuf::uint32 value) {
  index_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnbg.CompressedNbg.index)
}
inline void CompressedNbg::add_index(::google::protobuf::uint32 value) {
  index_.Add(value);
  // @@protoc_insertion_point(field_add:pbnbg.CompressedNbg.index)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CompressedNbg::index() const {
  // @@protoc_insertion_point(field_list:pbnbg.CompressedNbg.index)
  return index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CompressedNbg::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:pbnbg.CompressedNbg.index)
  return &index_;
}

// repeated uint32 nodes = 2;
inline int CompressedNbg::nodes_size() const {
  return nodes_.size();
}
inline void CompressedNbg::clear_nodes() {
  nodes_.Clear();
}
inline ::google::protobuf::uint32 CompressedNbg::nodes(int index) const {
  // @@protoc_insertion_point(field_get:pbnbg.CompressedNbg.nodes)
  return nodes_.Get(index);
}
inline void CompressedNbg::set_nodes(int index, ::google::protobuf::uint32 value) {
  nodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnbg.CompressedNbg.nodes)
}
inline void CompressedNbg::add_nodes(::google::protobuf::uint32 value) {
  nodes_.Add(value);
  // @@protoc_insertion_point(field_add:pbnbg.CompressedNbg.nodes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CompressedNbg::nodes() const {
  // @@protoc_insertion_point(field_list:pbnbg.CompressedNbg.nodes)
  return nodes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CompressedNbg::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:pbnbg.CompressedNbg.nodes)
  return &nodes_;
}

// repeated uint32 forward_weights = 3;
inline int CompressedNbg::forward_weights_size() const {
  return forward_weights_.size();
}
inline void CompressedNbg::clear_forward_weights() {
  forward_weights_.Clear();
}
inline ::google::protobuf::uint32 CompressedNbg::forward_weights(int index) const {
  // @@protoc_insertion_point(field_get:pbnbg.CompressedNbg.forward_weights)
  return forward_weights_.Get(index);
}
inline void CompressedNbg::set_forward_weights(int index, ::google::protobuf::uint32 value) {
  forward_weights_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnbg.CompressedNbg.forward_weights)
}
inline void CompressedNbg::add_forward_weights(::google::protobuf::uint32 value) {
  forward_weights_.Add(value);
  // @@protoc_insertion_point(field_add:pbnbg.CompressedNbg.forward_weights)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CompressedNbg::forward_weights() const {
  // @@protoc_insertion_point(field_list:pbnbg.CompressedNbg.forward_weights)
  return forward_weights_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CompressedNbg::mutable_forward_weights() {
  // @@protoc_insertion_point(field_mutable_list:pbnbg.CompressedNbg.forward_weights)
  return &forward_weights_;
}

// repeated uint32 reverse_weights = 4;
inline int CompressedNbg::reverse_weights_size() const {
  return reverse_weights_.size();
}
inline void CompressedNbg::clear_reverse_weights() {
  reverse_weights_.Clear();
}
inline ::google::protobuf::uint32 CompressedNbg::reverse_weights(int index) const {
  // @@protoc_insertion_point(field_get:pbnbg.CompressedNbg.reverse_weights)
  return reverse_weights_.Get(index);
}
inline void CompressedNbg::set_reverse_weights(int index, ::google::protobuf::uint32 value) {
  reverse_weights_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnbg.CompressedNbg.reverse_weights)
}
inline void CompressedNbg::add_reverse_weights(::google::protobuf::uint32 value) {
  reverse_weights_.Add(value);
  // @@protoc_insertion_point(field_add:pbnbg.CompressedNbg.reverse_weights)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CompressedNbg::reverse_weights() const {
  // @@protoc_insertion_point(field_list:pbnbg.CompressedNbg.reverse_weights)
  return reverse_weights_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CompressedNbg::mutable_reverse_weights() {
  // @@protoc_insertion_point(field_mutable_list:pbnbg.CompressedNbg.reverse_weights)
  return &reverse_weights_;
}

// -------------------------------------------------------------------

// StreetNames

// string names_packed = 1;
inline void StreetNames::clear_names_packed() {
  names_packed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StreetNames::names_packed() const {
  // @@protoc_insertion_point(field_get:pbnbg.StreetNames.names_packed)
  return names_packed_.GetNoArena();
}
inline void StreetNames::set_names_packed(const ::std::string& value) {
  
  names_packed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnbg.StreetNames.names_packed)
}
#if LANG_CXX11
inline void StreetNames::set_names_packed(::std::string&& value) {
  
  names_packed_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbnbg.StreetNames.names_packed)
}
#endif
inline void StreetNames::set_names_packed(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  names_packed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnbg.StreetNames.names_packed)
}
inline void StreetNames::set_names_packed(const char* value, size_t size) {
  
  names_packed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnbg.StreetNames.names_packed)
}
inline ::std::string* StreetNames::mutable_names_packed() {
  
  // @@protoc_insertion_point(field_mutable:pbnbg.StreetNames.names_packed)
  return names_packed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreetNames::release_names_packed() {
  // @@protoc_insertion_point(field_release:pbnbg.StreetNames.names_packed)
  
  return names_packed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreetNames::set_allocated_names_packed(::std::string* names_packed) {
  if (names_packed != NULL) {
    
  } else {
    
  }
  names_packed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), names_packed);
  // @@protoc_insertion_point(field_set_allocated:pbnbg.StreetNames.names_packed)
}

// repeated uint32 name_offsets = 2;
inline int StreetNames::name_offsets_size() const {
  return name_offsets_.size();
}
inline void StreetNames::clear_name_offsets() {
  name_offsets_.Clear();
}
inline ::google::protobuf::uint32 StreetNames::name_offsets(int index) const {
  // @@protoc_insertion_point(field_get:pbnbg.StreetNames.name_offsets)
  return name_offsets_.Get(index);
}
inline void StreetNames::set_name_offsets(int index, ::google::protobuf::uint32 value) {
  name_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnbg.StreetNames.name_offsets)
}
inline void StreetNames::add_name_offsets(::google::protobuf::uint32 value) {
  name_offsets_.Add(value);
  // @@protoc_insertion_point(field_add:pbnbg.StreetNames.name_offsets)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
StreetNames::name_offsets() const {
  // @@protoc_insertion_point(field_list:pbnbg.StreetNames.name_offsets)
  return name_offsets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
StreetNames::mutable_name_offsets() {
  // @@protoc_insertion_point(field_mutable_list:pbnbg.StreetNames.name_offsets)
  return &name_offsets_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pbnbg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_node_2dbased_2dgraph_2eproto__INCLUDED
